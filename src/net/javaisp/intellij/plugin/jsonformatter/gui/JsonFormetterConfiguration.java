package net.javaisp.intellij.plugin.jsonformatter.gui;

import net.javaisp.intellij.plugin.jsonformatter.JsonFormatterApplicationComponent;
import net.javaisp.intellij.plugin.jsonformatter.format.FormatterType;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.*;

import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.Spacer;

/**
 * The configuration dialog that allows the user to choose the formatting style and options.
 */
public class JsonFormetterConfiguration {
    private JRadioButton oneLineFormatterRadioButton;
    private JRadioButton compactFormatterRadioButton;
    private JRadioButton looseFormatterRadioButton;
    private JTextField indentSizeTextField;
    private JPanel rootComponent;

    public JsonFormetterConfiguration() {
        ActionListener formatterTypeRadioButtonListener = new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                JRadioButton source = (JRadioButton) event.getSource();

                indentSizeTextField.setEnabled(source == compactFormatterRadioButton);
            }
        };

        oneLineFormatterRadioButton.addActionListener(formatterTypeRadioButtonListener);
        compactFormatterRadioButton.addActionListener(formatterTypeRadioButtonListener);
        looseFormatterRadioButton.addActionListener(formatterTypeRadioButtonListener);
    }

    public JPanel getRootComponent() {
        return rootComponent;
    }

    public void setData(JsonFormatterApplicationComponent data) {
        indentSizeTextField.setText(
                String.valueOf(data.getIndentSize())
        );
        setFormatterType(data.getFormatterType());
    }

    public void getData(JsonFormatterApplicationComponent data) {
        String text = indentSizeTextField.getText();

        int indentSize;
        try {
            indentSize = Integer.parseInt(text);
        } catch (NumberFormatException e) {
            indentSize = 4;
        }

        data.setIndentSize(indentSize);

        data.setFormatterType(getFormatterType());
    }

    private FormatterType getFormatterType() {
        if (oneLineFormatterRadioButton.isSelected()) {
            return FormatterType.ONE_LINE;
        } else if (looseFormatterRadioButton.isSelected()) {
            return FormatterType.LOOSE;
        } else {
            return FormatterType.COMPACT;
        }
    }

    private void setFormatterType(FormatterType formatterType) {
        if (formatterType == FormatterType.ONE_LINE) {
            oneLineFormatterRadioButton.setSelected(true);
        } else if (formatterType == FormatterType.LOOSE) {
            looseFormatterRadioButton.setSelected(true);
        } else {
            compactFormatterRadioButton.setSelected(true);
        }

        indentSizeTextField.setEnabled(compactFormatterRadioButton.isSelected());
    }

    public boolean isModified(JsonFormatterApplicationComponent data) {
        String text = indentSizeTextField.getText();

        if (text != null) {
            if (!text.equals(String.valueOf(data.getIndentSize()))) {
                return true;
            }
        }

        //noinspection RedundantIfStatement
        if (getFormatterType() != data.getFormatterType()) {
            return true;
        }

        return false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootComponent = new JPanel();
        rootComponent.setLayout(new GridLayoutManager(4, 5, new Insets(0, 0, 0, 0), -1, -1));
        oneLineFormatterRadioButton = new JRadioButton();
        oneLineFormatterRadioButton.setText("One line formatter");
        oneLineFormatterRadioButton.setMnemonic('O');
        oneLineFormatterRadioButton.setDisplayedMnemonicIndex(0);
        rootComponent.add(oneLineFormatterRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootComponent.add(spacer1, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootComponent.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        compactFormatterRadioButton = new JRadioButton();
        compactFormatterRadioButton.setSelected(true);
        compactFormatterRadioButton.setText("Compact formatter");
        compactFormatterRadioButton.setMnemonic('C');
        compactFormatterRadioButton.setDisplayedMnemonicIndex(0);
        rootComponent.add(compactFormatterRadioButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        looseFormatterRadioButton = new JRadioButton();
        looseFormatterRadioButton.setText("Loose formatter");
        looseFormatterRadioButton.setMnemonic('L');
        looseFormatterRadioButton.setDisplayedMnemonicIndex(0);
        rootComponent.add(looseFormatterRadioButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Indent:");
        label1.setDisplayedMnemonic('I');
        label1.setDisplayedMnemonicIndex(0);
        rootComponent.add(label1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        indentSizeTextField = new JTextField();
        indentSizeTextField.setText("4");
        rootComponent.add(indentSizeTextField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(35, 20), null, 0, false));
        final Spacer spacer3 = new Spacer();
        rootComponent.add(spacer3, new GridConstraints(1, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        label1.setLabelFor(indentSizeTextField);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(oneLineFormatterRadioButton);
        buttonGroup.add(compactFormatterRadioButton);
        buttonGroup.add(looseFormatterRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootComponent;
    }
}
